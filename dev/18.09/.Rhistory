#summary(tspred_1_specs)
#Running the first time series prediction process
tspred_1_subset <- subset(tspred_1_specs, data=CATS[3])
#tspred_1_prep <- preprocess(tspred_1_subset,prep_test=TRUE)
tspred_1_train <- train(tspred_1_subset)
tspred_1_pred <- predict(tspred_1_train, onestep=FALSE)
tspred_1_eval <- evaluate(tspred_1_pred)
View(tspred_1_eval)
proc1 <- LT(base=2)
proc2 <- BCT(lambda=NULL)
proc3 <- WT(level=1, filter="bl14")#,c("la8","d4","bl14","c6"),
#prep_par=list(model="arima",h=20))
proc4 <- SW(window_len = 6)
proc5 <- subsetting(test_len=20)
proc6 <- NAS(na.action=na.omit)
proc7 <- MinMax()
proc8 <- AN()
#Obtaining objects of the modeling class
modl1 <- ARIMA()
modl2 <- NNET(size=5,train_par=list(),sw=proc4,proc=list(AN=proc8))
#Obtaining objects of the evaluating class
eval1 <- MSE()
#Defining (not running) the first time series prediction process
tspred_1_specs <- tspred(
subsetting=proc5,
processing=list(),
#BCT=proc2,
#WT=proc3),
#SW=proc4,
#MM=proc7),
modeling=modl2,
evaluating=list(MSE=eval1)
)
#summary(tspred_1_specs)
#Running the first time series prediction process
tspred_1_subset <- subset(tspred_1_specs, data=CATS[3])
#tspred_1_prep <- preprocess(tspred_1_subset,prep_test=TRUE)
tspred_1_train <- train(tspred_1_subset)
tspred_1_pred <- predict(tspred_1_train, onestep=FALSE)
#tspred_1_postp <- postprocess(tspred_1_pred)
tspred_1_eval <- evaluate(tspred_1_pred)
View(tspred_1_eval)
proc1 <- LT(base=2)
proc2 <- BCT(lambda=NULL)
proc3 <- WT(level=1, filter="bl14")#,c("la8","d4","bl14","c6"),
#prep_par=list(model="arima",h=20))
proc4 <- SW(window_len = 6)
proc5 <- subsetting(test_len=20)
proc6 <- NAS(na.action=na.omit)
proc7 <- MinMax()
proc8 <- AN()
#Obtaining objects of the modeling class
modl1 <- ARIMA()
modl2 <- NNET(size=5,train_par=list(),sw=proc4,proc=list(AN=proc8))
#Obtaining objects of the evaluating class
eval1 <- MSE()
#Defining (not running) the first time series prediction process
tspred_1_specs <- tspred(
subsetting=proc5,
processing=list(),
#BCT=proc2,
#WT=proc3),
#SW=proc4,
#MM=proc7),
modeling=modl2,
evaluating=list(MSE=eval1)
)
#summary(tspred_1_specs)
#Running the first time series prediction process
tspred_1_subset <- subset(tspred_1_specs, data=CATS[3])
#tspred_1_prep <- preprocess(tspred_1_subset,prep_test=TRUE)
tspred_1_train <- train(tspred_1_subset)
tspred_1_pred <- predict(tspred_1_train, onestep=TRUE)
#tspred_1_postp <- postprocess(tspred_1_pred)
tspred_1_eval <- evaluate(tspred_1_pred)
View(tspred_1_eval)
source('~/TSPred/dev/18.09/result.r')
proc1 <- LT(base=2)
proc2 <- BCT(lambda=NULL)
proc3 <- WT(level=1, filter="bl14")#,c("la8","d4","bl14","c6"),
#prep_par=list(model="arima",h=20))
proc4 <- SW(window_len = 6)
proc5 <- subsetting(test_len=20)
proc6 <- NAS(na.action=na.omit)
proc7 <- MinMax()
proc8 <- AN()
#Obtaining objects of the modeling class
modl1 <- ARIMA()
modl2 <- NNET(size=5,train_par=list(),sw=proc4,proc=list(AN=proc8))
#Obtaining objects of the evaluating class
eval1 <- MSE()
#Defining (not running) the first time series prediction process
tspred_1_specs <- tspred(
subsetting=proc5,
processing=list(),
#BCT=proc2,
#WT=proc3),
#SW=proc4,
#MM=proc7),
modeling=modl2,
evaluating=list(MSE=eval1)
)
#summary(tspred_1_specs)
#Running the first time series prediction process
tspred_1_subset <- subset(tspred_1_specs, data=CATS[3])
#tspred_1_prep <- preprocess(tspred_1_subset,prep_test=TRUE)
tspred_1_train <- train(tspred_1_subset)
tspred_1_pred <- predict(tspred_1_train, onestep=TRUE)
#tspred_1_postp <- postprocess(tspred_1_pred)
tspred_1_eval <- evaluate(tspred_1_pred)
View(tspred_1_eval)
ts_name <- attr(obj$results[[r]]$res,"name")
obj$results[[r]]$obj
proc1 <- LT(base=2)
proc2 <- BCT(lambda=NULL)
proc3 <- WT(level=1, filter="bl14")#,c("la8","d4","bl14","c6"),
#prep_par=list(model="arima",h=20))
proc4 <- SW(window_len = 6)
proc5 <- subsetting(test_len=20)
proc6 <- NAS(na.action=na.omit)
proc7 <- MinMax()
proc8 <- AN()
#Obtaining objects of the modeling class
modl1 <- ARIMA()
modl2 <- NNET(size=5,train_par=list(),sw=proc4,proc=list(AN=proc8))
#Obtaining objects of the evaluating class
eval1 <- MSE()
#Defining (not running) the first time series prediction process
tspred_1_specs <- tspred(
subsetting=proc5,
processing=list(),
#BCT=proc2,
#WT=proc3),
#SW=proc4,
#MM=proc7),
modeling=modl2,
evaluating=list(MSE=eval1)
)
#summary(tspred_1_specs)
#Running the first time series prediction process
tspred_1_subset <- subset(tspred_1_specs, data=CATS[3])
#tspred_1_prep <- preprocess(tspred_1_subset,prep_test=TRUE)
tspred_1_train <- train(tspred_1_subset)
tspred_1_pred <- predict(tspred_1_train, onestep=TRUE)
source('~/TSPred/dev/18.09/modeling.r')
source('~/TSPred/dev/18.09/result.r')
proc1 <- LT(base=2)
proc2 <- BCT(lambda=NULL)
proc3 <- WT(level=1, filter="bl14")#,c("la8","d4","bl14","c6"),
#prep_par=list(model="arima",h=20))
proc4 <- SW(window_len = 6)
proc5 <- subsetting(test_len=20)
proc6 <- NAS(na.action=na.omit)
proc7 <- MinMax()
proc8 <- AN()
#Obtaining objects of the modeling class
modl1 <- ARIMA()
modl2 <- NNET(size=5,train_par=list(),sw=proc4,proc=list(AN=proc8))
#Obtaining objects of the evaluating class
eval1 <- MSE()
#Defining (not running) the first time series prediction process
tspred_1_specs <- tspred(
subsetting=proc5,
processing=list(),
#BCT=proc2,
#WT=proc3),
#SW=proc4,
#MM=proc7),
modeling=modl2,
evaluating=list(MSE=eval1)
)
#summary(tspred_1_specs)
#Running the first time series prediction process
tspred_1_subset <- subset(tspred_1_specs, data=CATS[3])
#tspred_1_prep <- preprocess(tspred_1_subset,prep_test=TRUE)
tspred_1_train <- train(tspred_1_subset)
tspred_1_pred <- predict(tspred_1_train, onestep=TRUE)
#tspred_1_postp <- postprocess(tspred_1_pred)
tspred_1_eval <- evaluate(tspred_1_pred)
View(tspred_1_eval)
save.image("~/TSPred/dev/18.09/Usage.RData")
proc1 <- LT(base=2)
proc2 <- BCT(lambda=NULL)
proc3 <- WT(level=1, filter="bl14")#,c("la8","d4","bl14","c6"),
#prep_par=list(model="arima",h=20))
proc4 <- SW(window_len = 6)
proc5 <- subsetting(test_len=20)
proc6 <- NAS(na.action=na.omit)
proc7 <- MinMax()
proc8 <- AN()
#Obtaining objects of the modeling class
modl1 <- ARIMA()
modl2 <- NNET(size=5,train_par=list(),sw=proc4,proc=list(AN=proc8))
#Obtaining objects of the evaluating class
eval1 <- MSE()
#Defining (not running) the first time series prediction process
tspred_1_specs <- tspred(
subsetting=proc5,
processing=list(),
#BCT=proc2,
#WT=proc3),
#SW=proc4,
#MM=proc7),
modeling=modl2,
evaluating=list(MSE=eval1)
)
#summary(tspred_1_specs)
#Running the first time series prediction process
tspred_1_subset <- subset(tspred_1_specs, data=CATS[3])
#tspred_1_prep <- preprocess(tspred_1_subset,prep_test=TRUE)
tspred_1_train <- train(tspred_1_subset)
tspred_1_pred <- predict(tspred_1_train, onestep=TRUE)
#tspred_1_postp <- postprocess(tspred_1_pred)
tspred_1_eval <- evaluate(tspred_1_pred)
View(tspred_1_eval)
#Obtaining objects of the processing class
proc1 <- LT(base=2)
proc2 <- BCT(lambda=NULL)
proc3 <- WT(level=1, filter="bl14")#,c("la8","d4","bl14","c6"),
#prep_par=list(model="arima",h=20))
proc4 <- SW(window_len = 6)
proc5 <- subsetting(test_len=20)
proc6 <- NAS(na.action=na.omit)
proc7 <- MinMax()
proc8 <- AN()
#Obtaining objects of the modeling class
modl1 <- ARIMA()
modl2 <- NNET(size=5,train_par=list(),sw=proc4,proc=list(AN=proc8))
#Obtaining objects of the evaluating class
eval1 <- MSE()
#Defining (not running) the first time series prediction process
tspred_1_specs <- tspred(
subsetting=proc5,
processing=list(),
#BCT=proc2,
#WT=proc3),
#SW=proc4,
#MM=proc7),
modeling=modl2,
evaluating=list(MSE=eval1)
)
#summary(tspred_1_specs)
#Running the first time series prediction process
tspred_1_subset <- subset(tspred_1_specs, data=CATS[3])
#tspred_1_prep <- preprocess(tspred_1_subset,prep_test=TRUE)
tspred_1_train <- train(tspred_1_subset)
tspred_1_pred <- predict(tspred_1_train, onestep=FALSE)
#tspred_1_postp <- postprocess(tspred_1_pred)
tspred_1_eval <- evaluate(tspred_1_pred)
View(tspred_1_eval)
#Obtaining objects of the processing class
proc1 <- LT(base=2)
proc2 <- BCT(lambda=NULL)
proc3 <- WT(level=1, filter="bl14")#,c("la8","d4","bl14","c6"),
#prep_par=list(model="arima",h=20))
proc4 <- SW(window_len = 6)
proc5 <- subsetting(test_len=20)
proc6 <- NAS(na.action=na.omit)
proc7 <- MinMax()
proc8 <- AN()
#Obtaining objects of the modeling class
modl1 <- ARIMA()
modl2 <- NNET(size=5,train_par=list(),sw=proc4,proc=list(AN=proc8))
#Obtaining objects of the evaluating class
eval1 <- MSE()
#Defining (not running) the first time series prediction process
tspred_1_specs <- tspred(
subsetting=proc5,
processing=list(),
#BCT=proc2,
#WT=proc3),
#SW=proc4,
#MM=proc7),
modeling=modl2,
evaluating=list(MSE=eval1)
)
#summary(tspred_1_specs)
#Running the first time series prediction process
tspred_1_subset <- subset(tspred_1_specs, data=CATS[3])
#tspred_1_prep <- preprocess(tspred_1_subset,prep_test=TRUE)
tspred_1_train <- train(tspred_1_subset)
tspred_1_pred <- predict(tspred_1_train, onestep=FALSE)
#tspred_1_postp <- postprocess(tspred_1_pred)
tspred_1_eval <- evaluate(tspred_1_pred)
View(tspred_1_eval)
source('~/GitHub/TSPred/dev/18.09/minmax.r')
c(list("a","b"),NULL)
c(list("a","b"),list())
source('~/GitHub/TSPred/dev/18.09/minmax.r')
source('~/GitHub/TSPred/dev/18.09/methods_generics.r')
source('~/GitHub/TSPred/dev/18.09/tspred.r')
tspred_an_nnet <- tspred(
subsetting=subsetting(test_len=20),
modeling=NNET(size=5, sw=SW(window_len=6), proc=list(AN=AN())),
evaluating=list(MSE=MSE())
)
#summary(tspred_an_nnet)
#Running the time series prediction process
tspred_an_nnet_results <- workflow(tspred_1_specs,data=CATS[3],prep_test=TRUE,onestep=TRUE)
View(tspred_an_nnet_results)
source('~/GitHub/TSPred/dev/18.09/minmax.r')
tspred_an_nnet <- tspred(
subsetting=subsetting(test_len=20),
modeling=NNET(size=5, sw=SW(window_len=6), proc=list(AN=AN())),
evaluating=list(MSE=MSE())
)
#summary(tspred_an_nnet)
#Running the time series prediction process
tspred_an_nnet_results <- workflow(tspred_1_specs,data=CATS[3],prep_test=TRUE,onestep=TRUE)
View(tspred_an_nnet_results)
tspred_an_nnet <- tspred(
subsetting=subsetting(test_len=20),
modeling=NNET(size=5, sw=SW(window_len=6), proc=list(AN=AN())),
evaluating=list(MSE=MSE())
)
#summary(tspred_an_nnet)
#Running the time series prediction process
tspred_an_nnet_results <- workflow(tspred_1_specs,data=CATS[3],prep_test=TRUE,onestep=TRUE)
View(tspred_an_nnet_results)
source('~/GitHub/TSPred/dev/18.09/tspred.r')
tspred_an_nnet <- tspred(
subsetting=subsetting(test_len=20),
modeling=NNET(size=5, sw=SW(window_len=6), proc=list(AN=AN())),
evaluating=list(MSE=MSE())
)
#summary(tspred_an_nnet)
#Running the time series prediction process
tspred_an_nnet_results <- workflow(tspred_1_specs,data=CATS[3],prep_test=TRUE,onestep=TRUE)
View(tspred_an_nnet_results)
tspred_arima <- tspred(
subsetting=subsetting(test_len=20),
modeling=ARIMA(),
evaluating=list(MSE=MSE())
)
#summary(tspred_arima)
#Running the time series prediction process
tspred_arima_results <- workflow(tspred_1_specs,data=CATS[3],prep_test=FALSE,onestep=TRUE)
View(tspred_arima_results)
tspred_arima <- tspred(
subsetting=subsetting(test_len=20),
modeling=ARIMA(),
evaluating=list(MSE=MSE())
)
#summary(tspred_arima)
#Running the time series prediction process
tspred_arima_results <- workflow(tspred_arima,data=CATS[3],prep_test=FALSE,onestep=TRUE)
View(tspred_arima_results)
tspred_arima <- tspred(
subsetting=subsetting(test_len=20),
modeling=ARIMA(),
evaluating=list(MSE=MSE())
)
#summary(tspred_arima)
#Running the time series prediction process
tspred_arima_results <- workflow(tspred_arima,data=CATS[3],prep_test=FALSE,onestep=FALSE)
View(tspred_arima_results)
source('~/GitHub/TSPred/dev/18.09/tspred.r')
tspred_arima <- tspred(
subsetting=subsetting(test_len=20),
modeling=ARIMA(),
evaluating=list(MSE=MSE())
)
#summary(tspred_arima)
#Running the time series prediction process
tspred_arima_results <- workflow(tspred_arima,data=CATS[3],prep_test=FALSE,onestep=FALSE)
View(tspred_arima_results)
tspred_2_specs <- tspred(
subsetting=proc5,
processing=list(),
modeling=modl1,
evaluating=list(MSE=eval1)
)
#summary(tspred_2_specs)
#Running the first time series prediction process
tspred_2_subset <- subset(tspred_2_specs, data=CATS[3])
tspred_2_prep <- preprocess(tspred_2_subset,prep_test=FALSE)
tspred_2_train <- train(tspred_2_prep)
tspred_2_pred <- predict(tspred_2_train, onestep=FALSE)
is.linear(obj$modeling[[1]])
!onestep
NULL[2]
NULL[1]
length(mdl)
mdl[[i]]
tspred_2_specs <- tspred(
subsetting=proc5,
processing=list(),
modeling=modl1,
evaluating=list(MSE=eval1)
)
#summary(tspred_2_specs)
#Running the first time series prediction process
tspred_2_subset <- subset(tspred_2_specs, data=CATS[3])
tspred_2_prep <- preprocess(tspred_2_subset,prep_test=FALSE)
tspred_2_train <- train(tspred_2_prep)
tspred_2_pred <- predict(tspred_2_train, onestep=FALSE)
source('~/GitHub/TSPred/dev/18.09/modeling.r')
source('~/GitHub/TSPred/dev/18.09/tspred.r')
source('~/GitHub/TSPred/dev/18.09/tspred.r')
tspred_2_specs <- tspred(
subsetting=proc5,
processing=list(),
modeling=modl1,
evaluating=list(MSE=eval1)
)
#summary(tspred_2_specs)
#Running the first time series prediction process
tspred_2_subset <- subset(tspred_2_specs, data=CATS[3])
tspred_2_prep <- preprocess(tspred_2_subset,prep_test=FALSE)
tspred_2_train <- train(tspred_2_prep)
tspred_2_pred <- predict(tspred_2_train, onestep=FALSE)
tspred_2_postp <- postprocess(tspred_2_pred)
tspred_2_eval <- evaluate(tspred_2_postp)
View(tspred_2_eval)
source('~/GitHub/TSPred/dev/18.09/modeling.r')
tspred_2_specs <- tspred(
subsetting=proc5,
processing=list(),
modeling=modl1,
evaluating=list(MSE=eval1)
)
#summary(tspred_2_specs)
#Running the first time series prediction process
tspred_2_subset <- subset(tspred_2_specs, data=CATS[3])
tspred_2_prep <- preprocess(tspred_2_subset,prep_test=FALSE)
tspred_2_train <- train(tspred_2_prep)
tspred_2_pred <- predict(tspred_2_train, onestep=FALSE)
tspred_2_postp <- postprocess(tspred_2_pred)
tspred_2_eval <- evaluate(tspred_2_postp)
View(tspred_2_eval)
source('~/GitHub/TSPred/dev/18.09/modeling.r')
tspred_2_specs <- tspred(
subsetting=proc5,
processing=list(),
modeling=modl1,
evaluating=list(MSE=eval1)
)
#summary(tspred_2_specs)
#Running the first time series prediction process
tspred_2_subset <- subset(tspred_2_specs, data=CATS[3])
tspred_2_prep <- preprocess(tspred_2_subset,prep_test=FALSE)
tspred_2_train <- train(tspred_2_prep)
tspred_2_pred <- predict(tspred_2_train, onestep=FALSE)
tspred_2_postp <- postprocess(tspred_2_pred)
tspred_2_eval <- evaluate(tspred_2_postp)
View(tspred_2_eval)
tspred_2_specs <- tspred(
subsetting=proc5,
processing=list(),
modeling=modl1,
evaluating=list(MSE=eval1)
)
#summary(tspred_2_specs)
#Running the first time series prediction process
tspred_2_subset <- subset(tspred_2_specs, data=CATS[3])
tspred_2_prep <- preprocess(tspred_2_subset,prep_test=FALSE)
tspred_2_train <- train(tspred_2_prep)
tspred_2_pred <- predict(tspred_2_train, onestep=TRUE)
tspred_2_postp <- postprocess(tspred_2_pred)
tspred_2_eval <- evaluate(tspred_2_postp)
View(tspred_2_eval)
tspred_an_nnet <- tspred(
subsetting=subsetting(test_len=20),
modeling=NNET(size=5, sw=SW(window_len=6), proc=list(MM=MinMax())),
evaluating=list(MSE=MSE())
)
#summary(tspred_an_nnet)
#Running the time series prediction process
tspred_an_nnet_results <- workflow(tspred_an_nnet,data=CATS[3],prep_test=TRUE,onestep=TRUE)
View(tspred_an_nnet_results)
tspred_an_nnet <- tspred(
subsetting=subsetting(test_len=20),
modeling=NNET(size=5, sw=SW(window_len=6), proc=list(AN=AN())),
evaluating=list(MSE=MSE())
)
#summary(tspred_an_nnet)
#Running the time series prediction process
tspred_an_nnet_results <- workflow(tspred_an_nnet,data=CATS[3],prep_test=TRUE,onestep=TRUE)
View(tspred_an_nnet_results)
source('~/GitHub/TSPred/dev/18.09/modeling.r')
attr(tspred_an_nnet_results$model$V3,"name")
source('~/GitHub/TSPred/dev/18.09/evaluating.r')
source('~/GitHub/TSPred/dev/18.09/evaluating.r')
source('~/GitHub/TSPred/dev/18.09/evaluating.r')
source('~/GitHub/TSPred/dev/18.09/evaluating_subclasses.r')
source('~/GitHub/TSPred/dev/18.09/evaluating.r')
source('~/GitHub/TSPred/dev/18.09/evaluating_subclasses.r')
source('~/GitHub/TSPred/dev/18.09/evaluating_subclasses.r')
source('~/GitHub/TSPred/dev/18.09/evaluating.r')
tspred_an_nnet <- tspred(
subsetting=subsetting(test_len=20),
modeling=NNET(size=5, sw=SW(window_len=6), proc=list(AN=AN())),
evaluating=list(MSE=MSE())
)
#summary(tspred_an_nnet)
#Running the time series prediction process
tspred_an_nnet_results <- workflow(tspred_an_nnet,data=CATS[3],prep_test=TRUE,onestep=FALSE)
View(tspred_an_nnet_results)
#Defining the time series prediction process
tspred_arima <- tspred(
subsetting=subsetting(test_len=20),
modeling=ARIMA(),
evaluating=list(MSE=MSE())
)
#summary(tspred_arima)
#Running the time series prediction process
tspred_arima_results <- workflow(tspred_arima,data=CATS[3],prep_test=FALSE,onestep=FALSE)
View(tspred_arima_results)
source('~/GitHub/TSPred/dev/18.09/Tests.r')
source('~/GitHub/TSPred/dev/18.09/tspred.r')
source('~/GitHub/TSPred/dev/18.09/evaluating.r')
save.image("~/GitHub/TSPred/dev/18.09/Usage.RData")
