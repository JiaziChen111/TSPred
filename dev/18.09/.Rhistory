install.packages("forecast")
install.packages("TSPred")
install.packages("wavelets")
source('~/TSPred/dev/18.09/methods_generics.r')
source('~/TSPred/dev/18.09/LT.r')
source('~/TSPred/dev/18.09/WT.r')
source('~/TSPred/dev/18.09/fittestWavelet.r')
source('~/TSPred/dev/18.09/result.r')
source('~/TSPred/dev/18.09/processing.r')
#Subclass LT
LT <- function(base = exp(1)){ #::TSPred
processing(prep_func=LogT, prep_par=list(base=base),
postp_func=LogT.rev, postp_par=list(base=base),
method="Logarithmic transform", subclass="LT")
}
summary.LT <- function(obj,...){
NextMethod()
if(!is.null(obj$prep$par) || !is.null(obj$postp$par))  cat("Parameters:\n")
cat("\tBase: ",obj$prep$par$base,"\n")
}
#Subclass BCT
BCT <- function(lambda=NULL,prep_par=NULL,postp_par=NULL,...){
processing(prep_func = TSPred::BCT, prep_par = c(list(lambda=lambda),prep_par),
postp_func = TSPred::BCT.rev, postp_par = c(list(lambda=lambda),postp_par),
method = "Box-Cox transform",..., subclass ="BCT")
}
run.BCT <- function(obj,...,rev=FALSE){
#get result from run.processing
results <- NextMethod()
#if preprocessing with undefined lambda, update value of computed lambda parameter in the BCT object(s)
if(!rev && is.null(obj$prep$par$lambda)) results <- updt(results, par="lambda")
return(results)
}
summary.BCT <- function(obj,...){
NextMethod()
if(!is.null(obj$prep$par) || !is.null(obj$postp$par))  cat("Parameters:\n")
cat("\tLambda: ",obj$prep$par$lambda,"\n")
if(length(obj$prep$par)>1){
cat("\nOther parameters:\n")
print(obj$prep$par[-1])
}
}
#Subclass WT  #DO
WT <- function(level=NULL,filter=NULL,boundary="periodic",prep_par=NULL,postp_par=NULL,...){
processing(prep_func = WaveletT, prep_par = c(list(level=level,filter=filter,boundary=boundary),prep_par),
postp_func = WaveletT.rev, postp_par = c(list(wt_obj=NULL),postp_par),
method = "Wavelet transform",..., subclass ="WT")
}
run.WT <- function(obj,...,rev=FALSE){
#get result from run.processing
results <- NextMethod()
#browser()
#if preprocessing with undefined parameters, update computed values of parameters in the WT object(s)
if(!rev){
if(is.null(obj$postp$par$wt_obj)) results <- updt(results, par="wt_obj")
if(is.null(obj$prep$par$level)) results <- updt(results, par="level", value=results[[1]]$obj$postp$par$wt_obj@level)
if(is.null(obj$prep$par$filter)) results <- updt(results, par="filter", value=results[[1]]$obj$postp$par$wt_obj@filter)
}
return(results)
}
summary.WT <- function(obj,...){
NextMethod()
if(!is.null(obj$prep$par) || !is.null(obj$postp$par))  cat("Parameters:\n")
cat("\tLevel: ",obj$prep$par$level,"\n")
cat("\tFilter: ",obj$prep$par$filter,"\n")
cat("\tBoundary: ",obj$prep$par$boundary,"\n")
if(length(obj$prep$par)>3){
cat("\nOther parameters:\n")
print(obj$prep$par[-(1:3)])
}
}
source('~/TSPred/dev/18.09/processing_subclasses.r')
source('~/TSPred/dev/18.09/modeling.r')
source('~/TSPred/dev/18.09/modeling_subclasses.r')
source('~/TSPred/dev/18.09/evaluating.r')
source('~/TSPred/dev/18.09/evaluating_subclasses.r')
source('~/TSPred/dev/18.09/tspred.r')
source('~/TSPred/dev/18.09/processing_subclasses.r')
proc1 <- LT(base=2)
proc2 <- BCT(lambda=NULL)
proc3 <- WT(level=NULL,filter=c("la8","d4","bl14","c6"),prep_par=list(model="arima"))
modl1 <- ARIMA()
#Obtaining objects of the evaluating class
eval1 <- MSE()
tspred_1_specs <- tspred(processing=list(BCT=proc2,WT=proc3), modeling=modl1, evaluating=list(eval1))
View(tspred_1_specs)
tspred_1 <- prep.tspred(tspred_1_specs,data=CATS[3])
results[[1]]$obj$postp$par$wt_obj@level
results[[1]]$obj$postp$par$wt_obj
results[[1]]$obj$postp$par
results[[1]]$obj$postp
results[[1]]$obj
results[[1]]
View(results[[1]])
View(results[[1]][[1]])
source('~/TSPred/dev/18.09/processing_subclasses.r')
source('~/TSPred/dev/18.09/processing_subclasses.r')
source('~/TSPred/dev/18.09/processing_subclasses.r')
tspred_1 <- prep.tspred(tspred_1_specs,data=CATS[3])
source('~/TSPred/dev/18.09/processing_subclasses.r')
source('~/TSPred/dev/18.09/processing_subclasses.r')
tspred_1 <- prep.tspred(tspred_1_specs,data=CATS[3])
View(tspred_1)
source('~/TSPred/dev/18.09/processing_subclasses.r')
tspred_1 <- prep.tspred(tspred_1_specs,data=CATS[3])
View(tspred_1)
proc3 <- WT(level=NULL,filter=c("d4","bl14","c6"),prep_par=list(model="arima"))
tspred_1_specs <- tspred(processing=list(BCT=proc2,WT=proc3), modeling=modl1, evaluating=list(eval1))
#Running the first time series prediction process (optional)
tspred_1 <- prep.tspred(tspred_1_specs,data=CATS[3])
View(tspred_1)
proc3 <- WT(level=NULL, filter=c("la8","d4","bl14","c6"),
prep_par=list(model="arima",h=20))
tspred_1_specs <- tspred(processing=list(BCT=proc2,WT=proc3), modeling=modl1, evaluating=list(eval1))
#Running the first time series prediction process (optional)
tspred_1 <- prep.tspred(tspred_1_specs,data=CATS[3])
View(tspred_1)
View(tspred_1)
source('~/TSPred/dev/18.09/modeling.r')
source('~/TSPred/dev/18.09/tspred.r')
View(tspred_1)
source('~/TSPred/dev/18.09/tspred.r')
source('~/TSPred/dev/18.09/tspred.r')
View(tspred_1)
tspred_1 <- train.tspred(tspred_1)
source('~/TSPred/dev/18.09/modeling.r')
tspred_1 <- train.tspred(tspred_1)
source('~/TSPred/dev/18.09/tspred.r')
tspred_1 <- train.tspred(tspred_1)
View(tspred_1)
source('~/TSPred/dev/18.09/methods_generics.r')
source('~/TSPred/dev/18.09/tspred.r')
tspred_1 <- train(tspred_1)
tspred_1 <- preprocess(tspred_1_specs,data=CATS[3])
tspred_1 <- train(tspred_1)
source('~/TSPred/dev/18.09/tspred.r')
tspred_1 <- preprocess(tspred_1_specs,data=CATS[3])
source('~/TSPred/dev/18.09/tspred.r')
tspred_1 <- preprocess(tspred_1_specs,data=CATS[3])
tspred_1 <- preprocess(tspred_1_specs,data=CATS[3])
tspred_1_prep <- tspred_1
tspred_1_train <- train(tspred_1_prep)
View(tspred_1_train)
save.image("~/TSPred/dev/18.09/Usage.RData")
